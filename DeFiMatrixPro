# DeFiMatrixPro.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from datetime import datetime
from typing import Dict, Any

class DeFiMatrixPro:
    def __init__(self, api_base_url: str):
        self.api_base_url = api_base_url
        self.data = pd.DataFrame()

    def fetch_defi_data(self, protocol_name: str) -> Dict[str, Any]:
        """
        Fetch data for a specific DeFi protocol.
        """
        url = f"{self.api_base_url}/v1/protocols/{protocol_name}/metrics"
        response = requests.get(url)
        return response.json()

    def load_defi_data(self, protocol_name: str):
        """
        Load DeFi data into the DataFrame.
        """
        defi_data = self.fetch_defi_data(protocol_name)
        self.data = pd.json_normalize(defi_data)
        print(f"Data loaded for protocol: {protocol_name}")

    def analyze_defi(self):
        """
        Analyze DeFi data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        protocol_name = self.data['name'].iloc[0]
        tvl = self.data['tvl'].iloc[0]
        apr = self.data['apr'].iloc[0]
        
        print(f"Protocol Name: {protocol_name}")
        print(f"Total Value Locked (TVL): {tvl}")
        print(f"Annual Percentage Rate (APR): {apr}")

    def plot_defi_data(self):
        """
        Plot DeFi data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        time_series = self.data['timestamp']
        tvl_series = self.data['tvl']
        
        plt.figure(figsize=(10, 6))
        plt.plot(time_series, tvl_series, color='green', alpha=0.7)
        plt.xlabel('Time')
        plt.ylabel('Total Value Locked (TVL)')
        plt.title('TVL Over Time')
        plt.grid(True)
        plt.show()

    def generate_report(self) -> Dict[str, Any]:
        """
        Generate a report on the DeFi data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        protocol_name = self.data['name'].iloc[0]
        tvl = self.data['tvl'].iloc[0]
        apr = self.data['apr'].iloc[0]
        avg_tvl = np.mean(self.data['tvl'])
        
        report = {
            'protocol_name': protocol_name,
            'tvl': tvl,
            'apr': apr,
            'average_tvl': avg_tvl
        }
        
        return report

# Example usage
if __name__ == "__main__":
    api_base_url = 'https://api.example.com'  # Example base URL
    defi_matrix_pro = DeFiMatrixPro(api_base_url)
    
    # Load data for a specific DeFi protocol (example protocol name: 'Aave')
    defi_matrix_pro.load_defi_data(protocol_name='Aave')
    
    # Analyze DeFi data
    defi_matrix_pro.analyze_defi()
    
    # Plot DeFi data
    defi_matrix_pro.plot_defi_data()
    
    # Generate and print a report
    report = defi_matrix_pro.generate_report()
    print("DeFi Data Report:")
    for key, value in report.items():
        print(f"{key}: {value}")
